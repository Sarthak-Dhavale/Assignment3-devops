pipeline {
    agent any

    parameters {
        string(name: 'DEPLOY_VERSION', defaultValue: 'v1.0.0', description: 'Deployment Version')
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git Branch Name')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Deployment Environment')
    }

    environment {
        REMOTE_USER = 'ubuntu'
        REMOTE_HOST = '13.60.5.121'
        REMOTE_PATH = '/var/www/myapp'
        SSH_KEY_ID = 'deploy-key' // ID of credentials in Jenkins
        BACKUP_PATH = '/var/www/myapp_backup'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH_NAME}", url: 'https://github.com/Sarthak-Dhavale/Assignment3-devops'
            }
        }

        stage('Build') {
            steps {
                echo 'Build steps go here (e.g. npm install, npm run build)'
                // Example:
                // sh 'npm install && npm run build'
            }
        }

       stage('Backup') {
    steps {
        sshagent (credentials: [env.SSH_KEY_ID]) {
            sh """
            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                if [ -d "${REMOTE_PATH}" ]; then
                    rm -rf "${BACKUP_PATH}"
                    cp -r "${REMOTE_PATH}" "${BACKUP_PATH}"
                fi
            '
            """
        }
    }
}

       stage('Deploy') {
    steps {
        sshagent (credentials: [env.SSH_KEY_ID]) {
            sh """
            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                sudo mkdir -p /var/www/myapp_new &&
                sudo rm -rf /var/www/myapp_new/* &&
                sudo chown -R ${REMOTE_USER}:${REMOTE_USER} /var/www/myapp_new
            '
            scp -r ./build/* ${REMOTE_USER}@${REMOTE_HOST}:/var/www/myapp_new
            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                sudo rm -rf /var/www/myapp &&
                sudo mv /var/www/myapp_new /var/www/myapp
            '
            """
        }
    }
}
    }

    post {
        failure {
    echo 'Deployment failed, rolling back...'
    sshagent (credentials: [env.SSH_KEY_ID]) {
        sh """
        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
            if [ -d "${BACKUP_PATH}" ]; then
                rm -rf "${REMOTE_PATH}"
                cp -r "${BACKUP_PATH}" "${REMOTE_PATH}"
            fi
        '
        """
    }
}
        success {
            echo " Deployment successful! Version: ${params.DEPLOY_VERSION}, Env: ${params.ENV}"
        }
    }
}
